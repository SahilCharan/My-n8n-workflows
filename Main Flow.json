{
  "name": "Main Flow",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.firecrawl.dev/v1/extract",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fc-df149e96c71f4b16882a5b72e8d1d2e0"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"urls\": [\"{{ $json['Website URL'] }}\"],\n  \"prompt\": \"Extract the logo link of the event, event location, event date, exhibitors' names, booth numbers, and descriptions of the exhibitors.\",\n  \"schema\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"event\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"logo_link\": {\n          \"type\": \"string\"\n        },\n        \"location\": {\n          \"type\": \"string\"\n        },\n        \"date\": {\n          \"type\": \"string\"\n        },\n        \"exhibitors\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\"\n              },\n              \"booth_number\": {\n                \"type\": \"string\"\n              },\n              \"description\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"name\"\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"logo_link\",\n        \"location\",\n        \"date\",\n        \"exhibitors\"\n      ]\n    }\n  },\n  \"required\": [\n    \"event\"\n  ]\n},\n  \"scrapeOptions\": {\n    \"onlyMainContent\": true,\n    \"timeout\": 30000,\n    \"waitFor\": 3000\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        -528
      ],
      "id": "d404f9ab-4b24-463e-94e6-5cf3920127ae",
      "name": "Extract"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ff812e47-d747-4f1a-8fa8-9f3d40ec2acd",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1792,
        -544
      ],
      "id": "74366b25-dbd7-4a75-8c19-df0fa45e040f",
      "name": "If",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.firecrawl.dev/v1/extract/{{ $('Extract').item.json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer fc-df149e96c71f4b16882a5b72e8d1d2e0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1616,
        -528
      ],
      "id": "ff9a62ad-6794-4d11-a005-7da16bb6f642",
      "name": "Get Results"
    },
    {
      "parameters": {
        "amount": 30
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1424,
        -528
      ],
      "id": "28df7fb0-5fe2-404e-9c2f-aa6643882558",
      "name": "30 Secs",
      "webhookId": "e4866198-b806-4746-b57f-97333c497dbf"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        816,
        -528
      ],
      "id": "9783eeab-1e0b-4f44-be2d-e8949c0ccf53",
      "name": "10 Seconds",
      "webhookId": "6cc8c637-bafb-4d64-9cd4-8ae2a9f5b7ca"
    },
    {
      "parameters": {
        "formTitle": "WEB SCRAPE",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Website URL",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        1040,
        -528
      ],
      "id": "bd318127-dca2-4332-a636-a0b80804a0e2",
      "name": "On form submission",
      "webhookId": "b57d37d5-f4c7-466e-a79e-24da954447bf"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=- Use Web Search and find the name of the event based on the logo URL: \"{{ $json.logo_link }}\"\n\n- Using the name of the companies \"\" and description of the company \"{{$json.description}}\" search for the correct domain of the companies before returning the domain. Go through the website and verify whether it matches the description or not, and then return it as output.\n\nThe output format should be:\n{\n  \"event_name\":\"<event_name>\",\n  \"event_date\":\"{{ $json.event_date }}\",\n  \"exhibitor_name\":\"{{ $json.exhibitor_name }}\",\n  \"event_location\":\"{{ $json.event_location }}\",\n  \"company_domain\":\"<domain.subdomain>\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        528,
        -160
      ],
      "id": "6ac17170-2f26-472f-b0b1-64490fa7813c",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        464,
        48
      ],
      "id": "cfaeadb7-8d70-439c-9ab3-d28a9c6c250a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "eCq57XlUHIiWXbzt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items\n  .map((item) => {\n    const event = item?.json?.data?.event;\n    const exhibitors = event?.exhibitors.map((exhibitor) => {\n      return {\n        event_date: event?.date,\n        event_location: event?.location,\n        logo_link: event?.logo_link,\n        exhibitor_name: exhibitor?.name,\n        booth_number: exhibitor?.booth_number,\n        description: exhibitor?.description,\n      };\n    });\n    return exhibitors;\n  })\n  .flat();\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        -160
      ],
      "id": "a1690759-90f1-4688-9016-82ccd15f5deb",
      "name": "Code"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"event_name\": \"RE+\",\n  \"event_date\": \"Sep. 8-11\", \n  \"exhibitor_name\": \"Built Robotics\",\n  \"event_location\": \"Las Vegas, NV\",\n  \"company_domain\": \"builtrobotics.com\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        768,
        48
      ],
      "id": "51aa7574-0f64-4976-9232-6d443a6ed9d9",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => item.json.output);\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        -176
      ],
      "id": "2cca2cce-fe03-47fd-9248-881ed504002f",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f77aca26-85e8-4ecb-b7d9-d28feb649678",
              "name": "people",
              "value": "={{ $json.people }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        976,
        688
      ],
      "id": "d08ddfa2-5eee-43d1-b01e-e523d991d69a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ",
          "mode": "list",
          "cachedResultName": "exhibitor's data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "name": "={{ $json.name }}",
            "email": "={{ $json.email }}",
            "email_status": "={{ $json.email_status }}",
            "linkedin_url": "={{ $json.linkedin_url }}",
            "title": "={{ $json.title }}",
            "company_name": "={{ $json.current_organization.name }}",
            "company_Linkedin_url": "={{ $json.current_organization.linkedin_url }}",
            "company_website": "={{ $json.current_organization.website_url }}",
            "id2": "={{ $json.current_job.organization_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_url",
              "displayName": "linkedin_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email_status",
              "displayName": "email_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id2",
              "displayName": "id2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_Linkedin_url",
              "displayName": "company_Linkedin_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_website",
              "displayName": "company_website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1392,
        688
      ],
      "id": "6d06b95a-6d0c-47a7-a8a3-2bcd659fe5dd",
      "name": "Append or update row in sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": " https://api.apollo.io/api/v1/people/match",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"q_organization_domains\": \"{{ $json.company_domain }}\",\n  \"person_titles\": [\"Sales Manager\", \"CEO\", \"Director of Sales\", \"VP Sales\"],\n  \"person_seniorities\": [\"c_level\", \"director\", \"manager\"],\n  \"per_page\": 10,\n  \"page\": 1\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        768,
        688
      ],
      "id": "f963dae4-1ecb-45d5-a7e4-5c8169f159f1",
      "name": "People Search",
      "credentials": {
        "httpHeaderAuth": {
          "id": "j3vQgVzWWVqoTF4S",
          "name": "Apollo Cred"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node to clean and extract specific fields from people data\n\nconst cleanedData = [];\n\n// Process each item from the input\nfor (const inputItem of $input.all()) {\n  const peopleData = inputItem.json.people;\n  \n  // Check if people data exists and is a string (JSON)\n  if (peopleData && typeof peopleData === 'string') {\n    try {\n      const parsedPeople = JSON.parse(peopleData);\n      \n      // Process each person in the array\n      parsedPeople.forEach(person => {\n        // Extract basic person information\n        const cleanedPerson = {\n          // Basic Info\n          id: person.id || null,\n          name: person.name || null,\n          first_name: person.first_name || null,\n          last_name: person.last_name || null,\n          \n          // Contact Info\n          email: person.email || null,\n          email_status: person.email_status || null,\n          extrapolated_email_confidence: person.extrapolated_email_confidence || null,\n          \n          // Social Links\n          linkedin_url: person.linkedin_url || null,\n          twitter_url: person.twitter_url || null,\n          github_url: person.github_url || null,\n          facebook_url: person.facebook_url || null,\n          \n          // Professional Info\n          title: person.title || null,\n          headline: person.headline || null,\n          photo_url: person.photo_url || null,\n          \n          // Location\n          city: person.city || null,\n          state: person.state || null,\n          country: person.country || null,\n          \n          // Seniority & Department Info\n          seniority: person.seniority || null,\n          departments: person.departments || [],\n          subdepartments: person.subdepartments || [],\n          functions: person.functions || [],\n          \n          // Current Organization Info\n          current_organization: person.organization ? {\n            id: person.organization.id || null,\n            name: person.organization.name || null,\n            website_url: person.organization.website_url || null,\n            linkedin_url: person.organization.linkedin_url || null,\n            twitter_url: person.organization.twitter_url || null,\n            facebook_url: person.organization.facebook_url || null,\n            primary_domain: person.organization.primary_domain || null,\n            founded_year: person.organization.founded_year || null,\n            logo_url: person.organization.logo_url || null,\n            headcount_growth_6m: person.organization.organization_headcount_six_month_growth || null,\n            headcount_growth_12m: person.organization.organization_headcount_twelve_month_growth || null,\n            headcount_growth_24m: person.organization.organization_headcount_twenty_four_month_growth || null\n          } : null,\n          \n          // Current Job (from employment history)\n          current_job: person.employment_history ? \n            person.employment_history.find(job => job.current === true) || null : null,\n          \n          // Additional flags\n          show_intent: person.show_intent || false,\n          email_domain_catchall: person.email_domain_catchall || false,\n          revealed_for_current_team: person.revealed_for_current_team || false\n        };\n        \n        cleanedData.push(cleanedPerson);\n      });\n      \n    } catch (error) {\n      console.error('Error parsing people data:', error);\n    }\n  }\n}\n\n// Return the cleaned data\nreturn cleanedData.map(person => ({ json: person }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        688
      ],
      "id": "45498524-6898-4913-a306-ce30ce8a4c89",
      "name": "data cleaning"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ",
          "mode": "list",
          "cachedResultName": "exhibitor's data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16i6RZaOS6rlL9qdQLvr-PD4h27PuVGleWCNaDpWS4yQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.person.id }}",
            "email_status": "={{ $json.person.email_status }}",
            "email": "={{ $json.person.email }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_url",
              "displayName": "linkedin_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email_status",
              "displayName": "email_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id2",
              "displayName": "id2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_Linkedin_url",
              "displayName": "company_Linkedin_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_website",
              "displayName": "company_website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4384,
        -176
      ],
      "id": "b20f1fad-cbcb-4591-b368-a03329277514",
      "name": "Append or update row in sheet3",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apollo.io/api/v1/people/match",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $json.id }}\",\n  \"reveal_personal_email\": true,\n  \"reveal_work_email\": true,\n  \"reveal_phone\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        688
      ],
      "id": "0acca73d-b141-44b6-ac27-ac19baad8870",
      "name": "People Enrich",
      "credentials": {
        "httpHeaderAuth": {
          "id": "j3vQgVzWWVqoTF4S",
          "name": "Apollo Cred"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-2dae6e6e-65a9-44ec-9f7c-d4d2c5168079",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Name",
              "value": "={{ $json.person.name }}"
            },
            {
              "name": "Title",
              "value": "={{ $json.person.title }}"
            },
            {
              "name": "email_status",
              "value": "={{ $json.person.email_status }}"
            },
            {
              "name": "email",
              "value": "={{ $json.person.email }}"
            },
            {
              "name": "LinkedIn_URL",
              "value": "={{ $json.person.linkedin_url }}"
            },
            {
              "name": "Company name",
              "value": "={{ $json.person.employment_history[0].organization_name }}"
            },
            {
              "name": "company_website",
              "value": "={{ $json.person.organization.website_url }}"
            },
            {
              "name": "company_linkedIn",
              "value": "={{ $json.person.organization.linkedin_url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4064,
        -160
      ],
      "id": "e3d99e26-064d-47fc-a69e-c9b065425ff3",
      "name": "send to clay",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3856,
        -160
      ],
      "id": "d7753c8b-456c-4918-b848-f6e114745ed4",
      "name": "Wait",
      "webhookId": "029ace01-0ca2-4860-9dfd-3bc1591f44af"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3184,
        -160
      ],
      "id": "2b99366e-654f-44da-99c9-e05b4d6be335",
      "name": "Wait1",
      "webhookId": "efff69ab-132f-4079-b133-5d7e8af74a47"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const person = item.json;\n  return {\n    json: {\n      name: `${person.first_name ?? \"\"} ${person.last_name ?? \"\"}`.trim() || \"N/A\",\n      email: person.email ?? \"N/A\", \n      company: person.organization_name ?? \"N/A\",\n      linkedin: person.linkedin_url ?? \"N/A\",\n      location: `${person.city ?? \"\"}, ${person.state ?? \"\"}`.trim() || \"N/A\",\n      title: person.title ?? \"N/A\",\n    \n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        -176
      ],
      "id": "a358614b-1379-4f08-b8d2-2ac110d3f5a5",
      "name": "Cleaning the Data"
    },
    {
      "parameters": {
        "url": "={{ \"https://emailverifier.reoon.com/api/v1/verify?email=\" + $json.email + \"&key=pctHzHJAkgCeYQnaxjjs2JKEffLxoTIm\" }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3408,
        -160
      ],
      "id": "e2f205d1-7504-4683-baa7-f57996112060",
      "name": "Email Verification"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1WKtMlL83-_39kqp73fRrPqzXtBKJqYmxzfvNE5ltjMQ",
          "mode": "list",
          "cachedResultName": "N8N Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WKtMlL83-_39kqp73fRrPqzXtBKJqYmxzfvNE5ltjMQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WKtMlL83-_39kqp73fRrPqzXtBKJqYmxzfvNE5ltjMQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "email status": "={{ $json.status }}"
          },
          "matchingColumns": [
            "email status"
          ],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "linkedin",
              "displayName": "linkedin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email status",
              "displayName": "email status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        3648,
        -160
      ],
      "id": "d4f51503-308e-43f3-a063-7d85dcec3295",
      "name": "updating email status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "=Apollo_Data_{{ $now.format(\"D\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2352,
        -16
      ],
      "id": "a61064f3-b017-46e4-92d1-1ee7aa1e3d27",
      "name": "Create spreadsheet",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        -160
      ],
      "id": "da6a52fa-f331-480d-b6e3-a523e8d23c25",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2720,
        -160
      ],
      "id": "e5b98f02-5c81-4d8c-bb21-c521318bca48",
      "name": "Wait2",
      "webhookId": "aee5052b-783b-45ae-8301-601d02d4fb93"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2192,
        -176
      ],
      "id": "a925c4e0-ee5d-4498-b38f-6d4a34cbf7dd",
      "name": "Wait3",
      "webhookId": "c98bc974-e501-4eff-959a-9b74153926e3"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "={{ $node[\"Create spreadsheet\"].json[\"spreadsheetId\"] }}\n",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "linkedin",
              "displayName": "linkedin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "spreadsheetId",
              "displayName": "spreadsheetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "properties",
              "displayName": "properties",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sheets",
              "displayName": "sheets",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "spreadsheetUrl",
              "displayName": "spreadsheetUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2960,
        -160
      ],
      "id": "ecbbafaa-d1c7-4a1e-9354-4abedb4d4f0d",
      "name": "Append or update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apollo.io/api/v1/organizations/enrich",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "domain",
              "value": "={{ $json.company_domain }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1248,
        -176
      ],
      "id": "6b2eef7f-3eca-4a74-a5a6-08a7296d841d",
      "name": "Finding organization ID",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ZBFgTF89wXZAc0nD",
          "name": "Shreya's Apollo cred"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Company ICP Filter for N8N Code Node\n// Filters B2B tech companies based on size, location, industry, and keywords\n\nconst inputData = $input.all();\n\n// Filter configuration\nconst FILTERS = {\n  minEmployees: 50,\n  country: \"United States\",\n  \n  // Industries to INCLUDE (case-insensitive partial matches)\n  includeIndustries: [\n    \"information technology\",\n    \"computer software\", \n    \"software\",\n    \"technology\",\n    \"saas\",\n    \"cybersecurity\",\n    \"cloud computing\",\n    \"it services\",\n    \"computer hardware\",\n    \"data analytics\",\n    \"artificial intelligence\",\n    \"machine learning\",\n    \"fintech\",\n    \"edtech\",\n    \"healthtech\"\n  ],\n  \n  // Industries to EXCLUDE (case-insensitive partial matches)\n  excludeIndustries: [\n    \"marketing services\",\n    \"advertising\",\n    \"marketing agency\",\n    \"digital marketing\",\n    \"public relations\",\n    \"media services\",\n    \"marketing consultancy\",\n    \"adtech\",\n    \"advertising agency\"\n  ],\n  \n  // Keywords to INCLUDE (must have at least one)\n  includeKeywords: [\n    \"b2b\",\n    \"software\",\n    \"saas\",\n    \"technology\",\n    \"cloud\",\n    \"artificial intelligence\",\n    \"machine learning\",\n    \"enterprise software\",\n    \"business intelligence\",\n    \"data analytics\",\n    \"cybersecurity\",\n    \"it services\",\n    \"platform\",\n    \"api\"\n  ],\n  \n  // Keywords to EXCLUDE (if any found, exclude company)\n  excludeKeywords: [\n    \"marketing services\",\n    \"advertising agency\",\n    \"marketing consultancy\",\n    \"adtech\",\n    \"digital marketing agency\",\n    \"marketing automation agency\",\n    \"advertising technology agency\",\n    \"marketing consultant\"\n  ]\n};\n\nfunction filterCompanies(companies) {\n  return companies.filter(item => {\n    // Handle different data structures\n    const org = item.organization || item.json?.organization || item;\n    \n    // Skip if no organization data found\n    if (!org) {\n      console.log('No organization data found for item:', JSON.stringify(item).substring(0, 100));\n      return false;\n    }\n    \n    // 1. Employee size filter\n    if (!org.estimated_num_employees || org.estimated_num_employees < FILTERS.minEmployees) {\n      return false;\n    }\n    \n    // 2. Location filter\n    if (org.country !== FILTERS.country) {\n      return false;\n    }\n    \n    // 3. Industry filter\n    const industry = (org.industry || '').toLowerCase();\n    const industries = (org.industries || []).map(i => i.toLowerCase());\n    const allIndustries = [industry, ...industries].join(' ');\n    \n    // Check if industry should be excluded\n    const hasExcludedIndustry = FILTERS.excludeIndustries.some(excludeInd => \n      allIndustries.includes(excludeInd.toLowerCase())\n    );\n    if (hasExcludedIndustry) {\n      return false;\n    }\n    \n    // Check if industry is included (or if no specific industry match, rely on keywords)\n    const hasIncludedIndustry = FILTERS.includeIndustries.some(includeInd => \n      allIndustries.includes(includeInd.toLowerCase())\n    );\n    \n    // 4. Keywords filter\n    const keywords = (org.keywords || []).map(k => k.toLowerCase()).join(' ');\n    \n    // Check for excluded keywords\n    const hasExcludedKeywords = FILTERS.excludeKeywords.some(excludeKey => \n      keywords.includes(excludeKey.toLowerCase())\n    );\n    if (hasExcludedKeywords) {\n      return false;\n    }\n    \n    // Check for included keywords\n    const hasIncludedKeywords = FILTERS.includeKeywords.some(includeKey => \n      keywords.includes(includeKey.toLowerCase())\n    );\n    \n    // Company passes if it has included industry OR included keywords\n    return hasIncludedIndustry || hasIncludedKeywords;\n  });\n}\n\nfunction formatOutput(companies) {\n  return companies.map(item => {\n    // Handle different data structures\n    const org = item.organization || item.json?.organization || item;\n    \n    return {\n      organization_name: org.name || 'N/A',\n      organization_id: org.id || 'N/A',\n      domain: org.primary_domain || 'N/A',\n      website: org.website_url || 'N/A',\n      industry: org.industry || 'N/A',\n      employee_size: org.estimated_num_employees || 0,\n      location: `${org.city || 'N/A'}, ${org.state || 'N/A'}, ${org.country || 'N/A'}`,\n      revenue: org.annual_revenue_printed || org.organization_revenue_printed || 'N/A',\n      founded_year: org.founded_year || 'N/A',\n      keywords_sample: (org.keywords || []).slice(0, 5).join(', ') || 'N/A'\n    };\n  });\n}\n\ntry {\n  // Debug: Log the structure of the first item\n  if (inputData.length > 0) {\n    console.log('First item structure:', JSON.stringify(inputData[0], null, 2).substring(0, 500));\n  }\n  \n  // Filter companies based on ICP criteria\n  const filteredCompanies = filterCompanies(inputData);\n  \n  // Format output\n  const outputData = formatOutput(filteredCompanies);\n  \n  // Log filtering results\n  console.log(`Input companies: ${inputData.length}`);\n  console.log(`Filtered companies: ${outputData.length}`);\n  console.log(`Filter rate: ${inputData.length > 0 ? ((outputData.length / inputData.length) * 100).toFixed(1) : 0}%`);\n  \n  // Return filtered and formatted data\n  return outputData.map(company => ({ json: company }));\n  \n} catch (error) {\n  console.error('Error filtering companies:', error);\n  console.error('Error details:', error.message);\n  if (inputData.length > 0) {\n    console.error('Sample data structure:', JSON.stringify(inputData[0], null, 2).substring(0, 300));\n  }\n  throw error;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        -176
      ],
      "id": "be053c63-a796-442a-b272-04a5b6edd155",
      "name": "Apply ICP",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/code_crafter~apollo-io-scraper/run-sync-get-dataset-items?token=apify_api_KqUJxBUd5B9Tax5csIGL2hd4a26tOa2GcrBq",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer apify_api_GXRKc4ckxV8Hz5O7J2GG51XuyRZg1X2RUydE"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"include_email\": true,\n  \"url\": \"https://app.apollo.io/#/people?page=1&personTitles[]=sales%20manager&personTitles[]=ceo&prospectedByCurrentTeam[]=no&sortByField=%5Bnone%5D&sortAscending=false&organizationIds[]={{ $json.organization_id }}\"\n}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": false
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1696,
        -176
      ],
      "id": "8f4c6e85-051d-4261-bdb8-1412917ccbb7",
      "name": "Scrapping people Data using apify"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract": {
      "main": [
        [
          {
            "node": "30 Secs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "10 Seconds",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Results": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "30 Secs": {
      "main": [
        [
          {
            "node": "Get Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10 Seconds": {
      "main": [
        [
          {
            "node": "Get Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Finding organization ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "data cleaning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet2": {
      "main": [
        []
      ]
    },
    "People Search": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data cleaning": {
      "main": [
        [
          {
            "node": "Append or update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "People Enrich": {
      "main": [
        []
      ]
    },
    "send to clay": {
      "main": [
        [
          {
            "node": "Append or update row in sheet3",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "send to clay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Email Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleaning the Data": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Verification": {
      "main": [
        [
          {
            "node": "updating email status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create spreadsheet": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Append or update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Create spreadsheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updating email status": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finding organization ID": {
      "main": [
        [
          {
            "node": "Apply ICP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply ICP": {
      "main": [
        [
          {
            "node": "Scrapping people Data using apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrapping people Data using apify": {
      "main": [
        [
          {
            "node": "Cleaning the Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d42c1147-6f21-464f-833c-3b2204f9863a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9ed3b49e96399c647b63a1a3643de60fec30509a86483f2aa5625a86cd56a6a8"
  },
  "id": "isd0Rd6YUNzfMeOb",
  "tags": []
}