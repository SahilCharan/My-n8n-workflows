{
  "name": "Agentify updated flow copy",
  "nodes": [
    {
      "parameters": {
        "formTitle": "WEB SCRAPE",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Website URL",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        1904,
        -656
      ],
      "id": "c7ccb54d-7517-4d96-aab7-25f64f85aaf5",
      "name": "On form submission",
      "webhookId": "c708f95d-1a25-4642-bf92-a69f93e87633"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n- Using the name of the companies \"{{ $json.company_name }}\" and description of the company, search for the correct domain of the companies before returning the domain. Go through the website and verify whether it matches the description or not, and then return it as output.\n\nThe output format should be:\n{\n  \"booths\":\"{{ $json.booths }}\",\n  \"company_name\": \"{{ $json.company_name }}\",\n  \"company_domain\":\"<domain.subdomain>\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2640,
        -192
      ],
      "id": "e27e489d-6bb7-4e5b-9a3e-6a014e7ef59d",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2560,
        0
      ],
      "id": "36db5975-a633-474b-8d34-069c7669fc72",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "eCq57XlUHIiWXbzt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"company_name\": \"\",\n  \"booth\": \"\",\n  \"company_domain\": \"builtrobotics.com\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2864,
        0
      ],
      "id": "f975483b-8d8d-41b9-9848-2380cf85058a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5728,
        -688
      ],
      "id": "ce9e4b74-7eec-4b05-b921-2008c2671e77",
      "name": "Wait1",
      "webhookId": "50acca3a-d2c8-4a7b-8378-aabd6155a0bb"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/code_crafter~apollo-io-scraper/run-sync-get-dataset-items?token=apify_api_KqUJxBUd5B9Tax5csIGL2hd4a26tOa2GcrBq",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer apify_api_GXRKc4ckxV8Hz5O7J2GG51XuyRZg1X2RUydE"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"include_email\": true,\n  \"url\": \"{{ $json.input.url }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3984,
        -720
      ],
      "id": "6ea27b23-e44e-401e-b8d5-e03bbd379090",
      "name": "Scrapping Data from Apollo"
    },
    {
      "parameters": {
        "url": "={{ \"https://emailverifier.reoon.com/api/v1/verify?email=\" + $json.email + \"&key=pctHzHJAkgCeYQnaxjjs2JKEffLxoTIm\" }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5968,
        -688
      ],
      "id": "ce869422-69eb-4791-9584-e9e352505b4a",
      "name": "Email Verification"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "={{ $node[\"Create spreadsheet\"].json[\"spreadsheetId\"] }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/12MQcH0wdbwrTjcCRi6p5VUA-76NxL6yLzlaRTLuZ-6s/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "email": "={{ $json.email }}"
          },
          "matchingColumns": [
            "email"
          ],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_linkedIn",
              "displayName": "company_linkedIn",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "linkedin",
              "displayName": "linkedin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_website",
              "displayName": "company_website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "booths",
              "displayName": "booths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        6384,
        -688
      ],
      "id": "76021f42-2c64-4dcc-bac8-253c3df11cb0",
      "name": "updating email status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "=Apollo_Data_{{ $now.format(\"D\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4576,
        -672
      ],
      "id": "e19cff4a-8840-4871-ad45-1145b9ecd93c",
      "name": "Create spreadsheet",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4880,
        -688
      ],
      "id": "f1892cee-f7c0-4a90-88d9-69225dcf66a9",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5056,
        -688
      ],
      "id": "3d3d2cc4-9775-450a-8c3d-7dca0fccc057",
      "name": "Wait2",
      "webhookId": "1fa683e9-6e1c-408e-818e-4644b8d097d7"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4352,
        -400
      ],
      "id": "d2a16ca6-72e8-43bf-aea7-6d9d9b8b4fa5",
      "name": "Wait3",
      "webhookId": "e1a866fd-a0dd-46db-9c53-f68ebc6f48f6"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "={{ $node[\"Create spreadsheet\"].json[\"spreadsheetId\"] }}\n",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "linkedin",
              "displayName": "linkedin",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "spreadsheetId",
              "displayName": "spreadsheetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "properties",
              "displayName": "properties",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sheets",
              "displayName": "sheets",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "spreadsheetUrl",
              "displayName": "spreadsheetUrl",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        5504,
        -688
      ],
      "id": "f2a5145d-c1b9-4867-a56b-e032cf2f69be",
      "name": "Append or update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UMlViVpxUbI8XC38",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter all input items that do NOT have \"spreadsheetId\" in their json\nconst cleaned = items.filter(item => !item.json?.spreadsheetId);\nreturn cleaned;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5280,
        -688
      ],
      "id": "f274088d-dec5-4026-9f97-cedd062bd244",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "https://api.apollo.io/api/v1/organizations/enrich",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "domain",
              "value": "={{ $json.company_website }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3184,
        -656
      ],
      "id": "e4a9adc9-8a1a-40bd-ae85-a2a6afbb64c5",
      "name": "Organization Enrich",
      "retryOnFail": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "ZBFgTF89wXZAc0nD",
          "name": "Shreya's Apollo cred"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/ZF10OciYUgsj6Xlai/run-sync-get-dataset-items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer apify_api_psjsifUt665urVbNJhexFf5bpjS1e72X3cvV"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"output_type\": \"basic\",\n  \"result_limit\": 20,\n  \"start_url\": \"{{ $json[\"Website URL\"] }}\"\n} ",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": false
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2112,
        -656
      ],
      "id": "e1f7557b-f5d9-4e3c-8b06-23378719b3ec",
      "name": "Apify-map-you-show"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  const { company_name, company_website, booths } = item.json;\n  \n  // Handle null/undefined website values\n  if (!company_website) {\n    return { \n      company_name, \n      company_website: \"\", \n      booths \n    };\n  }\n  \n  // Extract clean domain name by removing protocol, www, and any trailing paths\n  let cleanDomain = company_website;\n  \n  // Remove protocol (http:// or https://)\n  cleanDomain = cleanDomain.replace(/^https?:\\/\\//, '');\n  \n  // Remove www.\n  cleanDomain = cleanDomain.replace(/^www\\./, '');\n  \n  // Remove any trailing slash and paths\n  cleanDomain = cleanDomain.split('/')[0];\n  \n  // Remove any query parameters or fragments\n  cleanDomain = cleanDomain.split('?')[0].split('#')[0];\n  \n  return { \n    company_name, \n    company_website: cleanDomain, \n    booths \n  };\n});\n\nreturn updatedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        -656
      ],
      "id": "4a396353-b826-493e-97c9-75ae2d64dc2c",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01e146e1-44b4-46df-9e47-56672481b996",
              "leftValue": "={{ $json.company_website }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "129937a1-6174-47ea-923d-4c1e09955ade",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2528,
        -656
      ],
      "id": "99898dac-f8a4-4e98-a8c1-8ebe4ea8efdb",
      "name": "If1"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "company",
              "field2": "company_name"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4128,
        -400
      ],
      "id": "a74455b0-2f20-4dcf-91b0-4fe741c26684",
      "name": "Merge1"
    },
    {
      "parameters": {
        "instructions": "output the email and status only if status is valid",
        "codeGeneratedForPrompt": "output the email and status only if status is valid",
        "jsCode": "const items = $input.all();\nconst validItems = items\n  .filter((item) => item?.json?.status === \"valid\")\n  .map((item) => {\n    return { email: item?.json?.email, status: item?.json?.status };\n  });\nreturn validItems;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        6176,
        -688
      ],
      "id": "b039ffc9-6e21-49f8-a2f6-e0eb8ddee10d",
      "name": "AI Transform"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "email",
        "joinMode": "enrichInput2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        6608,
        -448
      ],
      "id": "01f074ea-7876-409f-a091-43fa21d1cdfc",
      "name": "Merge2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2960,
        -656
      ],
      "id": "07c4678c-c763-4a26-816e-7a266f1ff653",
      "name": "Merge3"
    },
    {
      "parameters": {
        "instructions": "remove the list and give outputs in seperate fields",
        "codeGeneratedForPrompt": "remove the list and give outputs in seperate fields",
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  const output = item?.json?.output;\n  return { ...output };\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        2864,
        -384
      ],
      "id": "6888ad98-2c5f-49b4-aa25-ee66dd20d5a9",
      "name": "AI Transform1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-a74e2e2f-c00e-46c9-91d5-4bc2e716a44a",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Name",
              "value": "={{ $json.name }}"
            },
            {
              "name": "Title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "Company name",
              "value": "={{ $json.company }}"
            },
            {
              "name": "Email",
              "value": "={{ $json.email }}"
            },
            {
              "name": "LinkedIn",
              "value": "={{ $json.linkedin }}"
            },
            {
              "name": "Company Website",
              "value": "={{ $json.company_website }}"
            },
            {
              "name": "Company LinkedIn",
              "value": "={{ $json.company_linkedIn }}"
            },
            {
              "name": "Booths",
              "value": "={{ $json.booths }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6816,
        -448
      ],
      "id": "a4b879d8-4f98-4491-9b21-afee95887b9c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3056,
        -928
      ],
      "id": "8fb6c1db-0ebf-4207-8799-ddbd08de9ecb",
      "name": "Limit1"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const person = item.json;\n  return {\n    json: {\n      name: `${person.first_name ?? \"\"} ${person.last_name ?? \"\"}`.trim() || \"N/A\",\n      email: person.email ?? \"N/A\", \n      company: person.organization_name ?? \"N/A\",\n      company_linkedIn: $input.first().json.organization.linkedin_url ?? \"N/A\", // Fixed typo\n      linkedin: person.linkedin_url ?? \"N/A\",\n      location: `${person.city ?? \"\"}, ${person.state ?? \"\"}`.trim() || \"N/A\",\n      title: person.title ?? \"N/A\"\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4240,
        -640
      ],
      "id": "8f97ec3b-c1ad-40eb-bd42-b561b1bac1a2",
      "name": "Cleaning the Data"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nfunction formatOutput(companies) {\n  return companies.map(item => {\n    // Handle different data structures\n    const org = item.organization || item.json?.organization || item;\n    return {\n      organization_id: org.id || 'N/A',\n      organization_name: org.name || 'N/A'\n    };\n  });\n}\n// Format all companies without filtering\nconst outputData = formatOutput(inputData);\n// Return formatted data\nreturn outputData.map(company => ({ json: company }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3392,
        -752
      ],
      "id": "f9ca2067-66a9-4a75-b77c-6eb2e21481f8",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "46658449-de0a-4a25-a89c-fc519c5d2d63",
              "leftValue": "={{ $json.organization_id }}",
              "rightValue": "=N/A",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3568,
        -720
      ],
      "id": "df02c8f9-4451-4040-a167-f4c96cee9436",
      "name": "Filter"
    },
    {
      "parameters": {
        "jsCode": "// Retrieve all organizations from previous node\nconst organizations = $input.all();\n\n// Base URL template without organizationIds[]\nconst baseUrl = \"https://app.apollo.io/#/people?page=1&prospectedByCurrentTeam[]=no&sortByField=%5Bnone%5D&sortAscending=false&personSeniorities[]=vp&personSeniorities[]=director&personSeniorities[]=manager&personTitles[]=marketing&personTitles[]=sales%20and%20marketing&qPersonTitle=Sales%20AND%20Marketing%20OR%20Marketing\";\n\n// Build the organizationIds[] part dynamically\nconst orgParam = organizations\n  .map(item => `organizationIds[]=${item.json.organization_id}`)\n  .join(\"&\");\n\n// Construct full URL with all IDs\nconst url = `${baseUrl}&${orgParam}`;\n\n// Output one item with the combined URL\nreturn [\n  {\n    json: {\n      input: { url },\n      include_email: true\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3776,
        -592
      ],
      "id": "8ecd929f-c67b-4da5-8962-27c01dc6b03b",
      "name": "Code4"
    }
  ],
  "pinData": {},
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Apify-map-you-show",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI Transform1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Email Verification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Scrapping Data from Apollo": {
      "main": [
        [
          {
            "node": "Cleaning the Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Verification": {
      "main": [
        [
          {
            "node": "AI Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create spreadsheet": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Create spreadsheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updating email status": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Append or update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organization Enrich": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify-map-you-show": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform": {
      "main": [
        [
          {
            "node": "updating email status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Organization Enrich",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleaning the Data": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Scrapping Data from Apollo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "12b8e981-2422-42a2-8cfd-f2df8002c588",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9ed3b49e96399c647b63a1a3643de60fec30509a86483f2aa5625a86cd56a6a8"
  },
  "id": "NqGsr32vhwRtiXDa",
  "tags": []
}